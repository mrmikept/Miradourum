services:
  minio:
    image: minio/minio
    container_name: minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin123
    volumes:
      - minio-data:/data
      - ./minio-init.sh:/docker-entrypoint-initdb.d/minio-init.sh:ro
    command: server /data --console-address ":9001"

  # MinIO client service to create buckets
  minio-init:
    image: minio/mc
    container_name: minio-init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc alias set minio http://minio:9000 admin admin123; do echo 'Waiting for MinIO...' && sleep 1; done;
      /usr/bin/mc mb minio/poi-images --ignore-existing;
      /usr/bin/mc mb minio/profile-images --ignore-existing;
      /usr/bin/mc mb minio/review-images --ignore-existing;
      /usr/bin/mc anonymous set public minio/poi-images;
      /usr/bin/mc anonymous set public minio/profile-images;
      /usr/bin/mc anonymous set public minio/review-images;
      echo 'MinIO buckets created successfully';
      exit 0;
      "

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=mydb
      - MYSQL_USER=myuser
      - MYSQL_PASSWORD=mypassword
    volumes:
      - mysql-data:/var/lib/mysql
      - ./miradourum/sql/schema.sql:/docker-entrypoint-initdb.d/init.sql:ro  # This line mounts the SQL file

  payment_service:
    build: ./payment_service
    container_name: payment_service
    restart: always
    ports:
      - "3000:3000"


  backend:
    build: ./miradourum
    container_name: backend
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - minio

  frontend:
    build: ./miradourum-front
    container_name: frontend
    restart: always
    ports:
      - "5173:5173"



volumes:
  minio-data:
  mysql-data:
